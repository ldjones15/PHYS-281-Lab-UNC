# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WdXAvpjYCT9K1yAnvxud_0CrMvxO84Cu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# ------------------------------------------
dt = 2 * 10**(-6)  # time increment
data = pd.read_excel('Raw_Data.xlsx')

# Ensure the data columns are converted to numeric values
data.iloc[:, 0] = pd.to_numeric(data.iloc[:, 0], errors='coerce')
data.iloc[:, 1] = pd.to_numeric(data.iloc[:, 1], errors='coerce')

# Plot the raw data
plt.figure()
plt.plot(data.iloc[:, 0] * dt, data.iloc[:, 1])
plt.xlabel('Time(s)')
plt.ylabel('Voltage(V)')
plt.title('Raw Data')
plt.show()

# List start and end times
# Discharge
tstart = [0.000154, 0.000836, 0.001516]
tend = [0.000482, 0.001164, 0.001842]
# Charge
tstart2 = [0.000492, 0.001172, 0.001852]
tend2 = [0.000822, 0.001506, 0.002182]

# Find indexes corresponding to time values
istart = [int(round(t / dt)) for t in tstart]
iend = [int(round(t / dt)) for t in tend]
istart2 = [int(round(t / dt)) for t in tstart2]
iend2 = [int(round(t / dt)) for t in tend2]

# Fit each curve separately, get tau's
# Assume uniform error bars for each sample point

# ---------------------------------------------------------
# FITTING USING NONLINEAR LEAST SQUARES
# ---------------------------------------------------------
tauNonlin = np.zeros((3, 2))
plt.figure()

# Discharge:
def Fdischarge(xdata, V0, tau, V_offset):
    return V0 * np.exp(-xdata / tau) + V_offset

# Adjust these initial guesses if needed
x0 = [12, 0.0001, -6]  # Starting values similar to what we see

for i in range(3):
    # Extract the relevant portion of the data
    time_data = np.array(data.iloc[istart[i]:iend[i], 0]) * dt
    voltage_data = np.array(data.iloc[istart[i]:iend[i], 1])

    # Ensure time_data and voltage_data are numpy arrays
    time_data = np.asarray(time_data, dtype=float)
    voltage_data = np.asarray(voltage_data, dtype=float)

    # Perform nonlinear least squares fitting with increased maxfev
    popt, pcov = curve_fit(Fdischarge, time_data, voltage_data, p0=x0, maxfev=5000)
    tauNonlin[i, 0] = popt[1]

    # Calculate the uncertainty in tau (standard deviation)
    tau_error = np.sqrt(np.diag(pcov))[1]

    # Print the results
    print(f"Discharge {i+1}:")
    print(f"  Fitted Tau: {popt[1]:.6e} seconds")
    print(f"  Tau Uncertainty: {tau_error:.6e} seconds")

    # Plot the fit
    plt.plot(time_data, voltage_data, label=f'Discharge {i+1}')
    plt.plot(time_data, Fdischarge(time_data, *popt), '--', label=f'Fit {i+1}')

plt.xlabel('Time(s)')
plt.ylabel('Voltage(V)')
plt.title('Nonlinear Fit - Discharge')
plt.legend()
plt.show()

# The remaining code would continue similarly for the charge part.